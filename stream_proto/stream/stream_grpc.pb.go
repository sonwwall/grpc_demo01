// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: stream.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Simple_Fun_FullMethodName = "/Simple/Fun"
)

// SimpleClient is the client API for Simple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 普通
type SimpleClient interface {
	Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type simpleClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleClient(cc grpc.ClientConnInterface) SimpleClient {
	return &simpleClient{cc}
}

func (c *simpleClient) Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Simple_Fun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServer is the server API for Simple service.
// All implementations must embed UnimplementedSimpleServer
// for forward compatibility.
//
// 普通
type SimpleServer interface {
	Fun(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedSimpleServer()
}

// UnimplementedSimpleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSimpleServer struct{}

func (UnimplementedSimpleServer) Fun(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fun not implemented")
}
func (UnimplementedSimpleServer) mustEmbedUnimplementedSimpleServer() {}
func (UnimplementedSimpleServer) testEmbeddedByValue()                {}

// UnsafeSimpleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServer will
// result in compilation errors.
type UnsafeSimpleServer interface {
	mustEmbedUnimplementedSimpleServer()
}

func RegisterSimpleServer(s grpc.ServiceRegistrar, srv SimpleServer) {
	// If the following call pancis, it indicates UnimplementedSimpleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Simple_ServiceDesc, srv)
}

func _Simple_Fun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).Fun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Simple_Fun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).Fun(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Simple_ServiceDesc is the grpc.ServiceDesc for Simple service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simple_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Simple",
	HandlerType: (*SimpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fun",
			Handler:    _Simple_Fun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream.proto",
}

const (
	ServiceStream_Fun_FullMethodName          = "/ServiceStream/Fun"
	ServiceStream_DownLoadFile_FullMethodName = "/ServiceStream/DownLoadFile"
)

// ServiceStreamClient is the client API for ServiceStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceStreamClient interface {
	Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error)
	DownLoadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileResponse], error)
}

type serviceStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceStreamClient(cc grpc.ClientConnInterface) ServiceStreamClient {
	return &serviceStreamClient{cc}
}

func (c *serviceStreamClient) Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceStream_ServiceDesc.Streams[0], ServiceStream_Fun_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceStream_FunClient = grpc.ServerStreamingClient[Response]

func (c *serviceStreamClient) DownLoadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceStream_ServiceDesc.Streams[1], ServiceStream_DownLoadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, FileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceStream_DownLoadFileClient = grpc.ServerStreamingClient[FileResponse]

// ServiceStreamServer is the server API for ServiceStream service.
// All implementations must embed UnimplementedServiceStreamServer
// for forward compatibility.
type ServiceStreamServer interface {
	Fun(*Request, grpc.ServerStreamingServer[Response]) error
	DownLoadFile(*Request, grpc.ServerStreamingServer[FileResponse]) error
	mustEmbedUnimplementedServiceStreamServer()
}

// UnimplementedServiceStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceStreamServer struct{}

func (UnimplementedServiceStreamServer) Fun(*Request, grpc.ServerStreamingServer[Response]) error {
	return status.Errorf(codes.Unimplemented, "method Fun not implemented")
}
func (UnimplementedServiceStreamServer) DownLoadFile(*Request, grpc.ServerStreamingServer[FileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownLoadFile not implemented")
}
func (UnimplementedServiceStreamServer) mustEmbedUnimplementedServiceStreamServer() {}
func (UnimplementedServiceStreamServer) testEmbeddedByValue()                       {}

// UnsafeServiceStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceStreamServer will
// result in compilation errors.
type UnsafeServiceStreamServer interface {
	mustEmbedUnimplementedServiceStreamServer()
}

func RegisterServiceStreamServer(s grpc.ServiceRegistrar, srv ServiceStreamServer) {
	// If the following call pancis, it indicates UnimplementedServiceStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceStream_ServiceDesc, srv)
}

func _ServiceStream_Fun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStreamServer).Fun(m, &grpc.GenericServerStream[Request, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceStream_FunServer = grpc.ServerStreamingServer[Response]

func _ServiceStream_DownLoadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStreamServer).DownLoadFile(m, &grpc.GenericServerStream[Request, FileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceStream_DownLoadFileServer = grpc.ServerStreamingServer[FileResponse]

// ServiceStream_ServiceDesc is the grpc.ServiceDesc for ServiceStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceStream",
	HandlerType: (*ServiceStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fun",
			Handler:       _ServiceStream_Fun_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownLoadFile",
			Handler:       _ServiceStream_DownLoadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
